<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CannotCallABlankRuleName" xml:space="preserve">
    <value>Cannot call a rule with blank name.</value>
  </data>
  <data name="CannotCallABlankRulesetName" xml:space="preserve">
    <value>Cannot call a ruleset with blank name.</value>
  </data>
  <data name="CannotFindAProjectInExecutionStack" xml:space="preserve">
    <value>Cannot find the project in execution stack.</value>
  </data>
  <data name="CannotFindANamedRule" xml:space="preserve">
    <value>Cannot find a rule named '{0}' in project.</value>
  </data>
  <data name="CannotFindANamedRuleset" xml:space="preserve">
    <value>Cannot find a ruleset named '{0}' in project.</value>
  </data>
  <data name="UnsupportedTypeByFurtherMore" xml:space="preserve">
    <value>Type '{0}' is not supported by 'FurtherMore' action.</value>
  </data>
  <data name="CannotSetItselfAsParent" xml:space="preserve">
    <value>Circular parent reference. A cell's parent cannot be itself.</value>
  </data>
  <data name="CannotSetChildCellAsParent" xml:space="preserve">
    <value>Circular parent reference. A cell's parent cannot be one of its children.</value>
  </data>
  <data name="NamedColumnAlreadyExists" xml:space="preserve">
    <value>A column named '{0}' already exists.</value>
  </data>
  <data name="NamedColumnDoesNotExists" xml:space="preserve">
    <value>A column with name '{0}' does not exists.</value>
  </data>
  <data name="ConditionCellExpectedAsParent" xml:space="preserve">
    <value>Parent of a condition cell can only be another condition cell.</value>
  </data>
  <data name="TypeNotSupportedByOnMatch" xml:space="preserve">
    <value>Type '{0}' is not supported by 'OnMatch' condition.</value>
  </data>
  <data name="TypeNotSupportedByElse" xml:space="preserve">
    <value>Type '{0}' is not a supported by 'Else' condition.</value>
  </data>
  <data name="IndexOutOfRangeForActions" xml:space="preserve">
    <value>Index '{0}' is out of range for table action columns.</value>
  </data>
  <data name="CannotCallABlankTableName" xml:space="preserve">
    <value>Cannot call a table with blank name.</value>
  </data>
  <data name="CannotCallABlankTreeName" xml:space="preserve">
    <value>Cannot call a tree with blank name.</value>
  </data>
  <data name="CannotFindANamedTree" xml:space="preserve">
    <value>Cannot find a tree named '{0}' in project.</value>
  </data>
  <data name="CannotFindANamedTable" xml:space="preserve">
    <value>Cannot find a table named '{0}' in project.</value>
  </data>
  <data name="ContextIsDisposed" xml:space="preserve">
    <value>Context is disposed. Cannot evaluate the context.</value>
  </data>
  <data name="RuleAlreadyExistsInRuleset" xml:space="preserve">
    <value>Rule already exists in ruleset.</value>
  </data>
  <data name="RulesetAlreadyExistsInProject" xml:space="preserve">
    <value>Ruleset already exists in project.</value>
  </data>
  <data name="NamedRuleAlreadyExistsInRuleset" xml:space="preserve">
    <value>A rule with name '{0}' already exists in ruleset.</value>
  </data>
  <data name="NamedRulesetAlreadyExistsInProject" xml:space="preserve">
    <value>A ruleset with name '{0}' already exists in project.</value>
  </data>
  <data name="NamedDecisionTableAlreadyExistsInProject" xml:space="preserve">
    <value>A table with name '{0}' already exists in project.</value>
  </data>
  <data name="NamedDecisionTreeAlreadyExistsInProject" xml:space="preserve">
    <value>A tree with name '{0}' already exists in project.</value>
  </data>
  <data name="DocumentRootIsNotAsExpected" xml:space="preserve">
    <value>Document root name is not in expected format.</value>
  </data>
  <data name="IsNotAKnownTypeByReader" xml:space="preserve">
    <value>'{0}' is not a known type by reader.</value>
  </data>
  <data name="IsNotAKnownTypeByWriter" xml:space="preserve">
    <value>'{0}' is not a known type by writer.</value>
  </data>
  <data name="InvalidDate" xml:space="preserve">
    <value>Invalid date '{0}.'</value>
  </data>
  <data name="NullToken" xml:space="preserve">
    <value>Null token.</value>
  </data>
  <data name="InvalidNameBracketing" xml:space="preserve">
    <value>Invalid name bracketing </value>
  </data>
  <data name="InvalidCharacterAtPosition" xml:space="preserve">
    <value>Invalid character at position '{0}'.</value>
  </data>
  <data name="UnknownTokenFoundAt" xml:space="preserve">
    <value>Unknown token '{0}' found at '{1}'.</value>
  </data>
  <data name="CannotFindMainRulesetInProject" xml:space="preserve">
    <value>Cannot find 'MAIN' ruleset as entry point in project context.</value>
  </data>
  <data name="TypeNotSupportedByRoot" xml:space="preserve">
    <value>Type '{0}' is not a supported by row 'Root'.</value>
  </data>
  <data name="SubPriorityMustBeBetween" xml:space="preserve">
    <value>SubPriority of a rule must be between 0 and 1000.</value>
  </data>
  <data name="FunctionCanNotBeHandled" xml:space="preserve">
    <value>'{0}' is not a defined function or can not be handled with the given parameters.</value>
  </data>
  <data name="ObjectAlreadyExistsInList" xml:space="preserve">
    <value>Object already exists in list.</value>
  </data>
  <data name="ObjectWithSameNameAlreadyExistsInList" xml:space="preserve">
    <value>Object with the same name already exists in list.</value>
  </data>
  <data name="ExpectingRuleObject" xml:space="preserve">
    <value>Expecting rule object. The given object is not a rule.</value>
  </data>
  <data name="DecisionTableAlreadyExistsInProject" xml:space="preserve">
    <value>DecisionTable already exists in project.</value>
  </data>
  <data name="DecisionTreeAlreadyExistsInProject" xml:space="preserve">
    <value>DecisionTree already exists in project.</value>
  </data>
  <data name="ExpectingDecisionTableObject" xml:space="preserve">
    <value>Expecting DecisionTable object. The given object is not a DecisionTable.</value>
  </data>
  <data name="ExpectingDecisionTreeObject" xml:space="preserve">
    <value>Expecting DecisionTree object. The given object is not a DecisionTree.</value>
  </data>
</root>